# Autogenerated using ProtoBuf.jl v1.0.14 on 2024-01-02T18:44:47.449
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/cc3d5aa28fb2158ce4ff5aed9899545a37503a6b/include/google/protobuf/duration.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export Duration

struct Duration
    seconds::Int64
    nanos::Int32
end
PB.default_values(::Type{Duration}) = (;seconds = zero(Int64), nanos = zero(Int32))
PB.field_numbers(::Type{Duration}) = (;seconds = 1, nanos = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:Duration})
    seconds = zero(Int64)
    nanos = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            seconds = PB.decode(d, Int64)
        elseif field_number == 2
            nanos = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return Duration(seconds, nanos)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::Duration)
    initpos = position(e.io)
    x.seconds != zero(Int64) && PB.encode(e, 1, x.seconds)
    x.nanos != zero(Int32) && PB.encode(e, 2, x.nanos)
    return position(e.io) - initpos
end
function PB._encoded_size(x::Duration)
    encoded_size = 0
    x.seconds != zero(Int64) && (encoded_size += PB._encoded_size(x.seconds, 1))
    x.nanos != zero(Int32) && (encoded_size += PB._encoded_size(x.nanos, 2))
    return encoded_size
end
